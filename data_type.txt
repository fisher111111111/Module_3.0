Неизменяемые типы данных в Python

В Python существует два основных типа данных: изменяемые и неизменяемые. Неизменяемые типы данных - это те, которые не могут быть изменены после их создания. Это означает, что любые попытки изменить содержимое неизменяемого объекта создадут новый объект, а не изменят существующий.

К основным неизменяемым типам данных в Python относятся:

1. str (строки):
   Строки представляют собой последовательности символов. Они используются для хранения текстовой информации. Например, `s = "Привет"` создает строку с текстом "Привет". При попытке изменить строку, например, через `s[0] = "п"`, возникнет ошибка TypeError, так как строки неизменяемы. Вместо этого следует создать новую строку: `s = "п" + s[1:]`.

2. int (целые числа):
   Целые числа - это числовые значения без дробной части. Например, `a = 5`. Каждое целое число в Python - это неизменяемый объект. Любое изменение переменной, например, `a += 1`, фактически создаёт новый объект (в данном случае, объект со значением 6), который затем присваивается переменной `a`. Старый объект (5) останется в памяти, если на него всё ещё ссылаются другие переменные.

3. float (числа с плавающей запятой):
   Числа с плавающей запятой представляют собой вещественные числа, такие как 3.14, и также являются неизменяемыми. Как и в случае с целыми числами, любое изменение количества создаёт новый объект.

4. tuple (кортежи):
   Кортежи - это последовательности, похожие на списки, но они неизменяемы. Например, `t = (1, 2, 3)` создаёт кортеж с тремя элементами. После создания кортежа нельзя изменить его элементы, например, нельзя выполнить `t[0] = 10`. Если необходимо изменить кортеж, нужно создать новый: `t = (10,) + t[1:]`.

Премущества неизменяемых типов данных:
- Они обеспечивают безопасность данных, поскольку их содержимое не может быть изменено случайно.
- Их легче использовать как ключи в словарях и элементы в множествах, потому что их хэш-значение остаётся неизменным.
- Неизменяемые объекты могут повышать производительность и эффективность использования памяти, так как они могут переиспользоваться.
Неизменяемость данных в Python является одной из его ключевых особенностей и позволяет создавать более предсказуемые и устойчивые программы.

